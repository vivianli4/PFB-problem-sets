#!/usr/bin/env python3
#Oct 15, 2025 Vivian Li 

# dna_sequence = 'GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCG'
# print(len(dna_sequence))
dnaSequence='CGTGCGATCG'
#convert the input sequence into all CAPS
dnaSequence=dnaSequence.upper()

#question6: counting the total numbers of each nucleotide in the dnaSequence
# print(f'There are {dnaSequence.count('A')} A and {dnaSequence.count('T')} T and {dnaSequence.count('G')} G and {dnaSequence.count('C')} C in the sequence inputed')

#question 8: find and replace all instances of 'T' with 'U' 
# dnaSequence=dnaSequence.replace('T', 'U')
# dnaSequenceCompare = 'GAUGGGAUUGGGGUUUUCCCCUCCCAUGUGCUCAAGACUGGCGCUAAAAGUUUUGAGCUUCUCAAAAGUCUAGAGCCACCGUCCAGGGAGCAGGUAGCUGCUGGGCUCCGGGGACACUUUGCGUUCGGGCUGGGAGCGUGCUUUCCACGACGGUGACACGCUUCCCUGGAUUGGCAGCCAGACUGCCUUCCGGGUCACUGCCAUGGAGGAGCCGCAGUCAGAUCCUAGCGUCGAGCCCCCUCUGAGUCAGGAAACAUUUUCAGACCUAUGGAAACUACUUCCUGAAAACAACGUUCUGUCCCCCUUGCCGUCCCAAGCAAUGGAUGAUUUGAUGCUGUCCCCGGACGAUAUUGAACAAUGGUUCACUGAAGACCCAGGUCCAGAUGAAGCUCCCAGAAUUCGCCAGAGGCUGCUCCCCCCGUGGCCCCUGCACCAGCAGCUCCUACACCGGCGGCCCCUGCACCAGCCCCCUCCUGGCCCCUGUCAUCUUCUGUCCCUUCCCAGAAAACCUACCAGGGCAGCUACGGUUUCCGUCUGGGCUUCUUGCAUUCUGGGACAGCCAAGUCUGUGACUUGCACGUACUCCCCUGCCCUCAACAAGAUGUUUUGCCAACUGGCCAAGACCUGCCCUGUGCAGCUGUGGGUUGAUUCCACACCCCCGCCCGGCACCCGCGUCCGCGCCAUGGCCAUCUACAAGCAGUCACAGCACAUGACGGAGGUUGUGAGGCGCUGCCCCCACCAUGAGCGCUGCUCAGAUAGCGAUGGUCUGGCCCCUCCUCAGCAUCUUAUCCGAGUGGAAGGAAAUUUGCGUGUGGAGUAUUUGGAUGACAGAAACACUUUUCG'

# if dnaSequence==dnaSequenceCompare:
#     print ('you correctly converted to RNA')

#question9: calcuate the AT content of the DNA input 
# numberA=dnaSequence.count('A')
# numberG=dnaSequence.count('G')
# numberC=dnaSequence.count('C')
# numberT=dnaSequence.count('T')
# print(f' the AT content of the sequence is {(numberA+numberT)/(numberA+numberG+numberC+numberT):.0%}')
# print(f' the GC content of the sequence is {(numberG+numberC)/(numberA+numberG+numberC+numberT):.0%}')

#question10: extract and print the substring at position 100 to position 200
#inputstring = 'GCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTG'
# sub_dna = dnaSequence[99:200]
#if sub_dna == inputstring:
#    print('successfully extracted subsequence')

#question12: calculate the GC content of the substring
# numberA=sub_dna.count('A')
# numberG=sub_dna.count('G')
# numberC=sub_dna.count('C')
# numberT=sub_dna.count('T')
# print(f'(the GC content for the subsequence is {(numberG+numberC)/(numberC+numberG+numberA+numberT):.0%}')

#question13 reverse complement 
# reverseSeq='AGCGCTCATGGTGGGGGCAGCGCCTCACAACCTCCGTCATGTGCTGTGACTGCTTGTAGATGGCCATGGCGCGGACGCGGGTGCCGGGCGGGGGTGTGGAATCAACCCACAGCTGCACAGGGCAGGTCTTGGCCAGTTGGCAAAACATCTTGTTGAGGGCAGGGGAGTACGTGCAAGTCACAGACTTGGCTGTCCCAGAATGCAAGAAGCCCAGACGGAAACCGTAGCTGCCCTGGTAGGTTTTCTGGGAAGGGACAGAAGATGACAGGGGCCAGGAGGGGGCTGGTGCAGGGGCCGCCGGTGTAGGAGCTGCTGGTGCAGGGGCCACGGGGGGAGCAGCCTCTGGCGAATTCTGGGAGCTTCATCTGGACCTGGGTCTTCAGTGAACCATTGTTCAATATCGTCCGGGGACAGCATCAAATCATCCATTGCTTGGGACGGCAAGGGGGACAGAACGTTGTTTTCAGGAAGTAGTTTCCATAGGTCTGAAAATGTTTCCTGACTCAGAGGGGGCTCGACGCTAGGATCTGACTGCGGCTCCTCCATGGCAGTGACCCGGAAGGCAGTCTGGCTGCCAATCCAGGGAAGCGTGTCACCGTCGTGGAAAGCACGCTCCCAGCCCGAACGCAAAGTGTCCCCGGAGCCCAGCAGCTACCTGCTCCCTGGACGGTGGCTCTAGACTTTTGAGAAGCTCAAAACTTTTAGCGCCAGTCTTGAGCACATGGGAGGGGAAAACCCCAATCCCATC'
# # dnaSequence = dnaSequence.replace('T', 'A')
# # dnaSequence = dnaSequence.replace('A', 'T')
# # this is an example of something that won't work, because i'll see the Ts to As but then will replace all the As to Ts again, everything will be T
# #instead, perform the method translate on the dnaSequence, str is a function, and make trans is a way to use the str function. the way it's replaced will be the order that is defined
# dnaSequence=dnaSequence.translate(str.maketrans('ATGC','TACG'))
# dnaSequence=dnaSequence[::-1]
# if dnaSequence==reverseSeq:
#     print('the sequence was reverse complemented')

#question14 find the EcoRI site of an input sequence
startingPosition= dnaSequence.find('GA') +1
endingPosition = startingPosition + 2
print(f'startPos: {startingPosition} endPos: {endingPosition}')
