#!/usr/bin/env python3
#Oct 16, 2025 Vivian Li 

import sys
#problem 1 construct dictionary
# fave_things = {'book': 'matilda', 'song': 'sympathy is a knife', 'tree': 'cedar'}
# fave_book=fave_things['book']
#print(fave_book)

#question5 add something to the dictionary
# fave_things['organism'] = 'dog'
# print(fave_things['organism'])

#question6 print using for loop
# for thing in fave_things:
#     print(thing, fave_things[thing])

#question7 take value from command line
# fave_things[sys.argv[1]]
# print(fave_things[sys.argv[1]])

#question8 print all the keys
# all_keys=fave_things.keys()
# print(all_keys)

# #question9 change the value of fave organism
# fave_things['organism'] = 'cat'

#question10 get fav_thing from command line and a new value for the key as well. 
# print('enter the key you wish to use')
# userinput=input()
# if userinput in fave_things: 
#     print(f'enter your fave {userinput}')
#     userinput2=input()
#     fave_things[userinput] = userinput2
# print(fave_things)

# #questions about sets now
# mySet=set('ATGTGGG')
# mySet2 = {'ATGTGGG'}
# print(f'the number of things in mySet is {len(mySet)} and the length of mySet2 is {len(mySet2)}')

# #question 2 sets
# set1={3, 14, 15, 9, 26, 5, 35, 9}
# set2={60, 2, 14, 0, 9}

# intersection= set1 & set2
# difference=  set1- set2
# union = set1 | set2
# symmetricalDiff= set1 ^ set2 
# print (f'{intersection}, {difference}, {union}, {symmetricalDiff}')

# question 3 sets 
# newSet = set('GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTNNGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCGTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACX')
# print(newSet)

#Dictionries and Sets and File I/O
# dna_seq= 'GAACTCCAAAAATGAAAACATAGTAGCAATCAAAGCATCCCACTATTTTTTGTCTCTCGTTTCATTAGCGTTGTAAATTACTGATACCCTACTATACCTCTACAAGGCCTTTGTCATCTTTTTACTCAAGTGTGAAATCATCACTTATTGTATGAAGGATGAGCTTTCCGTTCGCTAGTTTGCTGAAAAGGCCTTCTGCAATAAGCTCTCTATTATCTTTAAAAAAACCTGGTTCCTGGTCTTCCATTCTGCTAAAAGCTGTAGGGGTTTTATCACGAGATTCCCGTTGGCATTCTGACTTATTAAAAATGCTTACAGAAGAAATGGATTCTTTAAATGGTCAAATTAATACGTGGACAGATAATAATCCTTTATTAGATGAAATTACGAAGCCATACAGAAAATCTTCAACTCGTTTTTTTCATCCGCTTCTTGTACTTCTAATGTCTAGAGCATCAGTAAATGGGGATCCACCGAGTCAGCAACTATTTCAAAGGTACAAACAACTTGCCCGTGTAACAGAATTGATTCATGCTGCCAATATAATTCATATTAATATTGGAGAAGAACAAAGCAACGAACAGATTAAACTTGCAACGTTGGTTGGAGATTATTTACTCGGAAAGGCGTCTGTTGATTTAGCACATTTAGAAAACAACGCTATTACAGAAATTATGGCTTCTGTTATTGCAAACTTAGTTGAAGGGCACTTCGGAAGCCGACAAAATGGCTCTGTTGGTTTGTCAAACGAACGAACCATCCTTCTGCAATCAGCCTTTATGCCAGCAAAGGCATGTTTATGCGCAAGCATATTGAATAACTCATCACAATACATTAATGATGCGTGTTTCAATTATGGAAAATTTCTAGGCTTATCGCTGCAACTGGCCCATAAGCCTGTATCTCCTGACGCCCAAGTTTTGCAAAAGAATAATGACATTTTGAAAACATATGTTGAGAATGCCAAGAGCTCATTGTCTGTTTTCCCCGATATAGAGGCTAAGCAAGCTCTCATGGAAATCGCTAATAGTGTTTCGAAGTAATCGACAGGTATTGTATCCTGGATTAATATTAGGGTGGCTCATGCATGCTCGTGCAATCGTAACAAATATGTCTTTCTTTTACGAATTTTAACGCTTCAATATAAATCATATTTTTCCTCA'
# dna_set=set(dna_seq)
# nt_count={}
# for nt in dna_seq:
#     nt_count[nt]=dna_seq.count(nt)
# print(nt_count)
# GC_content= ((nt_count['G'])+nt_count['C'])/len(dna_seq)
# print(f'the GC content of this sequence is {GC_content:.2%}')

#number 5 write FASTA parser script
# with open ('Python_06.fasta', 'r') as fasta_file:
#     fasta_dict={}
#     for line in fasta_file:
#         if '>' in line:
#             line=line.strip()
#             fasta_dict[line] =''
#         else:
#             for key in fasta_dict.keys():
#                 line=line.strip()
#                 fasta_dict[key]+=line
#     print(fasta_dict)

#extra exercise
# with open ('Python_06.seq.txt', 'r') as sequenceFile:
#     uniqueCount={}
#     for line in sequenceFile:
#         line=line.rstrip()
#         gene_id,seq= line.split()
#         for nt in seq:
#             uniqueCount[nt]=seq.count(nt)

#         GC_content= (uniqueCount['G']+uniqueCount['C'])/len(seq)
#         print(f'the name is {gene_id} there are {uniqueCount} and the GC content is {GC_content:.2%}')



